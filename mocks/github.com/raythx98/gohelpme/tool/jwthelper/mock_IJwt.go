// Code generated by mockery. DO NOT EDIT.

package jwthelper

import (
	http "net/http"

	jwthelper "github.com/raythx98/gohelpme/tool/jwthelper"
	mock "github.com/stretchr/testify/mock"
)

// MockIJwt is an autogenerated mock type for the IJwt type
type MockIJwt struct {
	mock.Mock
}

type MockIJwt_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIJwt) EXPECT() *MockIJwt_Expecter {
	return &MockIJwt_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: request, tokenType
func (_m *MockIJwt) Authenticate(request *http.Request, tokenType jwthelper.TokenType) error {
	ret := _m.Called(request, tokenType)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*http.Request, jwthelper.TokenType) error); ok {
		r0 = rf(request, tokenType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIJwt_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockIJwt_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - request *http.Request
//   - tokenType jwthelper.TokenType
func (_e *MockIJwt_Expecter) Authenticate(request interface{}, tokenType interface{}) *MockIJwt_Authenticate_Call {
	return &MockIJwt_Authenticate_Call{Call: _e.mock.On("Authenticate", request, tokenType)}
}

func (_c *MockIJwt_Authenticate_Call) Run(run func(request *http.Request, tokenType jwthelper.TokenType)) *MockIJwt_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].(jwthelper.TokenType))
	})
	return _c
}

func (_c *MockIJwt_Authenticate_Call) Return(_a0 error) *MockIJwt_Authenticate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIJwt_Authenticate_Call) RunAndReturn(run func(*http.Request, jwthelper.TokenType) error) *MockIJwt_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubject provides a mock function with given fields: request
func (_m *MockIJwt) GetSubject(request *http.Request) (string, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for GetSubject")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (string, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) string); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIJwt_GetSubject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubject'
type MockIJwt_GetSubject_Call struct {
	*mock.Call
}

// GetSubject is a helper method to define mock.On call
//   - request *http.Request
func (_e *MockIJwt_Expecter) GetSubject(request interface{}) *MockIJwt_GetSubject_Call {
	return &MockIJwt_GetSubject_Call{Call: _e.mock.On("GetSubject", request)}
}

func (_c *MockIJwt_GetSubject_Call) Run(run func(request *http.Request)) *MockIJwt_GetSubject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockIJwt_GetSubject_Call) Return(_a0 string, _a1 error) *MockIJwt_GetSubject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIJwt_GetSubject_Call) RunAndReturn(run func(*http.Request) (string, error)) *MockIJwt_GetSubject_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccessToken provides a mock function with given fields: subject
func (_m *MockIJwt) NewAccessToken(subject string) (string, error) {
	ret := _m.Called(subject)

	if len(ret) == 0 {
		panic("no return value specified for NewAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(subject)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(subject)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(subject)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIJwt_NewAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewAccessToken'
type MockIJwt_NewAccessToken_Call struct {
	*mock.Call
}

// NewAccessToken is a helper method to define mock.On call
//   - subject string
func (_e *MockIJwt_Expecter) NewAccessToken(subject interface{}) *MockIJwt_NewAccessToken_Call {
	return &MockIJwt_NewAccessToken_Call{Call: _e.mock.On("NewAccessToken", subject)}
}

func (_c *MockIJwt_NewAccessToken_Call) Run(run func(subject string)) *MockIJwt_NewAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIJwt_NewAccessToken_Call) Return(_a0 string, _a1 error) *MockIJwt_NewAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIJwt_NewAccessToken_Call) RunAndReturn(run func(string) (string, error)) *MockIJwt_NewAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewRefreshToken provides a mock function with given fields: subject
func (_m *MockIJwt) NewRefreshToken(subject string) (string, error) {
	ret := _m.Called(subject)

	if len(ret) == 0 {
		panic("no return value specified for NewRefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(subject)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(subject)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(subject)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIJwt_NewRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewRefreshToken'
type MockIJwt_NewRefreshToken_Call struct {
	*mock.Call
}

// NewRefreshToken is a helper method to define mock.On call
//   - subject string
func (_e *MockIJwt_Expecter) NewRefreshToken(subject interface{}) *MockIJwt_NewRefreshToken_Call {
	return &MockIJwt_NewRefreshToken_Call{Call: _e.mock.On("NewRefreshToken", subject)}
}

func (_c *MockIJwt_NewRefreshToken_Call) Run(run func(subject string)) *MockIJwt_NewRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIJwt_NewRefreshToken_Call) Return(_a0 string, _a1 error) *MockIJwt_NewRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIJwt_NewRefreshToken_Call) RunAndReturn(run func(string) (string, error)) *MockIJwt_NewRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIJwt creates a new instance of MockIJwt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIJwt(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIJwt {
	mock := &MockIJwt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
