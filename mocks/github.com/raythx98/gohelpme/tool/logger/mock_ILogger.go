// Code generated by mockery. DO NOT EDIT.

package logger

import (
	context "context"

	logger "github.com/raythx98/gohelpme/tool/logger"
	mock "github.com/stretchr/testify/mock"
)

// MockILogger is an autogenerated mock type for the ILogger type
type MockILogger struct {
	mock.Mock
}

type MockILogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockILogger) EXPECT() *MockILogger_Expecter {
	return &MockILogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: ctx, msg, fields
func (_m *MockILogger) Debug(ctx context.Context, msg string, fields ...logger.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockILogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockILogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - fields ...logger.Field
func (_e *MockILogger_Expecter) Debug(ctx interface{}, msg interface{}, fields ...interface{}) *MockILogger_Debug_Call {
	return &MockILogger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{ctx, msg}, fields...)...)}
}

func (_c *MockILogger_Debug_Call) Run(run func(ctx context.Context, msg string, fields ...logger.Field)) *MockILogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]logger.Field, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(logger.Field)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockILogger_Debug_Call) Return() *MockILogger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockILogger_Debug_Call) RunAndReturn(run func(context.Context, string, ...logger.Field)) *MockILogger_Debug_Call {
	_c.Run(run)
	return _c
}

// Error provides a mock function with given fields: ctx, msg, fields
func (_m *MockILogger) Error(ctx context.Context, msg string, fields ...logger.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockILogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockILogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - fields ...logger.Field
func (_e *MockILogger_Expecter) Error(ctx interface{}, msg interface{}, fields ...interface{}) *MockILogger_Error_Call {
	return &MockILogger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{ctx, msg}, fields...)...)}
}

func (_c *MockILogger_Error_Call) Run(run func(ctx context.Context, msg string, fields ...logger.Field)) *MockILogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]logger.Field, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(logger.Field)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockILogger_Error_Call) Return() *MockILogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockILogger_Error_Call) RunAndReturn(run func(context.Context, string, ...logger.Field)) *MockILogger_Error_Call {
	_c.Run(run)
	return _c
}

// Fatal provides a mock function with given fields: ctx, msg, fields
func (_m *MockILogger) Fatal(ctx context.Context, msg string, fields ...logger.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockILogger_Fatal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatal'
type MockILogger_Fatal_Call struct {
	*mock.Call
}

// Fatal is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - fields ...logger.Field
func (_e *MockILogger_Expecter) Fatal(ctx interface{}, msg interface{}, fields ...interface{}) *MockILogger_Fatal_Call {
	return &MockILogger_Fatal_Call{Call: _e.mock.On("Fatal",
		append([]interface{}{ctx, msg}, fields...)...)}
}

func (_c *MockILogger_Fatal_Call) Run(run func(ctx context.Context, msg string, fields ...logger.Field)) *MockILogger_Fatal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]logger.Field, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(logger.Field)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockILogger_Fatal_Call) Return() *MockILogger_Fatal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockILogger_Fatal_Call) RunAndReturn(run func(context.Context, string, ...logger.Field)) *MockILogger_Fatal_Call {
	_c.Run(run)
	return _c
}

// GetInstance provides a mock function with no fields
func (_m *MockILogger) GetInstance() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInstance")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockILogger_GetInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstance'
type MockILogger_GetInstance_Call struct {
	*mock.Call
}

// GetInstance is a helper method to define mock.On call
func (_e *MockILogger_Expecter) GetInstance() *MockILogger_GetInstance_Call {
	return &MockILogger_GetInstance_Call{Call: _e.mock.On("GetInstance")}
}

func (_c *MockILogger_GetInstance_Call) Run(run func()) *MockILogger_GetInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockILogger_GetInstance_Call) Return(_a0 interface{}) *MockILogger_GetInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockILogger_GetInstance_Call) RunAndReturn(run func() interface{}) *MockILogger_GetInstance_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: ctx, msg, fields
func (_m *MockILogger) Info(ctx context.Context, msg string, fields ...logger.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockILogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockILogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - fields ...logger.Field
func (_e *MockILogger_Expecter) Info(ctx interface{}, msg interface{}, fields ...interface{}) *MockILogger_Info_Call {
	return &MockILogger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{ctx, msg}, fields...)...)}
}

func (_c *MockILogger_Info_Call) Run(run func(ctx context.Context, msg string, fields ...logger.Field)) *MockILogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]logger.Field, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(logger.Field)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockILogger_Info_Call) Return() *MockILogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockILogger_Info_Call) RunAndReturn(run func(context.Context, string, ...logger.Field)) *MockILogger_Info_Call {
	_c.Run(run)
	return _c
}

// Panic provides a mock function with given fields: ctx, msg, fields
func (_m *MockILogger) Panic(ctx context.Context, msg string, fields ...logger.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockILogger_Panic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Panic'
type MockILogger_Panic_Call struct {
	*mock.Call
}

// Panic is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - fields ...logger.Field
func (_e *MockILogger_Expecter) Panic(ctx interface{}, msg interface{}, fields ...interface{}) *MockILogger_Panic_Call {
	return &MockILogger_Panic_Call{Call: _e.mock.On("Panic",
		append([]interface{}{ctx, msg}, fields...)...)}
}

func (_c *MockILogger_Panic_Call) Run(run func(ctx context.Context, msg string, fields ...logger.Field)) *MockILogger_Panic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]logger.Field, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(logger.Field)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockILogger_Panic_Call) Return() *MockILogger_Panic_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockILogger_Panic_Call) RunAndReturn(run func(context.Context, string, ...logger.Field)) *MockILogger_Panic_Call {
	_c.Run(run)
	return _c
}

// Warn provides a mock function with given fields: ctx, msg, fields
func (_m *MockILogger) Warn(ctx context.Context, msg string, fields ...logger.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockILogger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type MockILogger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - fields ...logger.Field
func (_e *MockILogger_Expecter) Warn(ctx interface{}, msg interface{}, fields ...interface{}) *MockILogger_Warn_Call {
	return &MockILogger_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{ctx, msg}, fields...)...)}
}

func (_c *MockILogger_Warn_Call) Run(run func(ctx context.Context, msg string, fields ...logger.Field)) *MockILogger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]logger.Field, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(logger.Field)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockILogger_Warn_Call) Return() *MockILogger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockILogger_Warn_Call) RunAndReturn(run func(context.Context, string, ...logger.Field)) *MockILogger_Warn_Call {
	_c.Run(run)
	return _c
}

// NewMockILogger creates a new instance of MockILogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockILogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockILogger {
	mock := &MockILogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
